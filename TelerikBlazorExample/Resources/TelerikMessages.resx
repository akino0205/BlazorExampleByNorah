<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Filter_And" xml:space="preserve">
    <value>And</value>
  </data>
  <data name="Filter_Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="Filter_DateIsEqualTo" xml:space="preserve">
    <value>Is equal to</value>
  </data>
  <data name="Filter_DateIsGreaterThan" xml:space="preserve">
    <value>Is after</value>
  </data>
  <data name="Filter_DateIsGreaterThanOrEqualTo" xml:space="preserve">
    <value>Is after or equal to</value>
  </data>
  <data name="Filter_DateIsLessThan" xml:space="preserve">
    <value>Is before</value>
  </data>
  <data name="Filter_DateIsLessThanOrEqualTo" xml:space="preserve">
    <value>Is before or equal to</value>
  </data>
  <data name="Filter_DateIsNotEqualTo" xml:space="preserve">
    <value>Is not equal to</value>
  </data>
  <data name="Filter_Filter" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="Filter_Info" xml:space="preserve">
    <value>Show items with value that:</value>
  </data>
  <data name="Filter_IsFalse" xml:space="preserve">
    <value>is false</value>
  </data>
  <data name="Filter_IsTrue" xml:space="preserve">
    <value>is true</value>
  </data>
  <data name="Filter_NumberIsEqualTo" xml:space="preserve">
    <value>Is equal to</value>
  </data>
  <data name="Filter_NumberIsGreaterThan" xml:space="preserve">
    <value>Is greater than</value>
  </data>
  <data name="Filter_NumberIsGreaterThanOrEqualTo" xml:space="preserve">
    <value>Is greater than or equal to</value>
  </data>
  <data name="Filter_NumberIsLessThan" xml:space="preserve">
    <value>Is less than</value>
  </data>
  <data name="Filter_NumberIsLessThanOrEqualTo" xml:space="preserve">
    <value>Is less than or equal to</value>
  </data>
  <data name="Filter_NumberIsNotEqualTo" xml:space="preserve">
    <value>Is not equal to</value>
  </data>
  <data name="Filter_Or" xml:space="preserve">
    <value>Or</value>
  </data>
  <data name="Filter_StringContains" xml:space="preserve">
    <value>Contains</value>
  </data>
  <data name="Filter_StringDoesNotContain" xml:space="preserve">
    <value>Does not contain</value>
  </data>
  <data name="Filter_StringEndsWith" xml:space="preserve">
    <value>Ends with</value>
  </data>
  <data name="Filter_StringIsEqualTo" xml:space="preserve">
    <value>Is equal to</value>
  </data>
  <data name="Filter_StringIsNotEqualTo" xml:space="preserve">
    <value>Is not equal to</value>
  </data>
  <data name="Filter_StringStartsWith" xml:space="preserve">
    <value>Starts with</value>
  </data>
  <data name="Grid_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Grid_CancelChanges" xml:space="preserve">
    <value>Cancel changes</value>
  </data>
  <data name="Grid_Confirmation" xml:space="preserve">
    <value>Are you sure you want to delete this record?</value>
  </data>
  <data name="Grid_Create" xml:space="preserve">
    <value>Add new record</value>
  </data>
  <data name="Grid_Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Grid_Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Grid_SaveChanges" xml:space="preserve">
    <value>Save changes</value>
  </data>
  <data name="Grid_Select" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="Grid_Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="Group_Empty" xml:space="preserve">
    <value>You can drag a column header and drop it here to group by that column</value>
  </data>
  <data name="Pager_Display" xml:space="preserve">
    <value>{0} - {1} of {2} items</value>
  </data>
  <data name="Pager_Empty" xml:space="preserve">
    <value>No items to display</value>
  </data>
  <data name="Pager_First" xml:space="preserve">
    <value>Go to the first page</value>
  </data>
  <data name="Pager_ItemsPerPage" xml:space="preserve">
    <value>items per page</value>
  </data>
  <data name="Pager_Last" xml:space="preserve">
    <value>Go to the last page</value>
  </data>
  <data name="Pager_Next" xml:space="preserve">
    <value>Go to the next page</value>
  </data>
  <data name="Pager_Of" xml:space="preserve">
    <value>of {0}</value>
  </data>
  <data name="Pager_Page" xml:space="preserve">
    <value>Page</value>
  </data>
  <data name="Pager_Previous" xml:space="preserve">
    <value>Go to the previous page</value>
  </data>
  <data name="Pager_Refresh" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="Filter_EnumIsEqualTo" xml:space="preserve">
    <value>Is equal to</value>
  </data>
  <data name="Filter_EnumIsNotEqualTo" xml:space="preserve">
    <value>Is not equal to</value>
  </data>
  <data name="Filter_SelectValue" xml:space="preserve">
    <value>-Select value-</value>
  </data>
  <data name="Grid_Columns" xml:space="preserve">
    <value>Columns</value>
  </data>
  <data name="Grid_SortAscending" xml:space="preserve">
    <value>Sort Ascending</value>
  </data>
  <data name="Grid_SortDescending" xml:space="preserve">
    <value>Sort Descending</value>
  </data>
  <data name="Filter_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Filter_Operator" xml:space="preserve">
    <value>Operator</value>
  </data>
  <data name="Filter_AdditionalOperator" xml:space="preserve">
    <value>Additional operator</value>
  </data>
  <data name="Filter_Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Filter_AdditionalValue" xml:space="preserve">
    <value>Additional value</value>
  </data>
  <data name="Filter_Logic" xml:space="preserve">
    <value>Filters logic</value>
  </data>
  <data name="Grid_CancelDelete" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Grid_ColumnSettings" xml:space="preserve">
    <value>Column Settings</value>
  </data>
  <data name="Grid_ConfirmDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Grid_CheckAll" xml:space="preserve">
    <value>Select All</value>
  </data>
  <data name="Grid_Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="Pager_MorePages" xml:space="preserve">
    <value>More pages</value>
  </data>
  <data name="Grid_Lock" xml:space="preserve">
    <value>Lock</value>
  </data>
  <data name="Grid_Unlock" xml:space="preserve">
    <value>Unlock</value>
  </data>
  <data name="Grid_Excel" xml:space="preserve">
    <value>Export to Excel</value>
  </data>
  <data name="Grid_Pdf" xml:space="preserve">
    <value>Export to PDF</value>
  </data>
  <data name="Filter_DateIsNotNull" xml:space="preserve">
    <value>Is not null</value>
  </data>
  <data name="Filter_DateIsNull" xml:space="preserve">
    <value>Is null</value>
  </data>
  <data name="Filter_EnumIsNotNull" xml:space="preserve">
    <value>Is not null</value>
  </data>
  <data name="Filter_EnumIsNull" xml:space="preserve">
    <value>Is null</value>
  </data>
  <data name="Filter_NumberIsNotNull" xml:space="preserve">
    <value>Is not null</value>
  </data>
  <data name="Filter_NumberIsNull" xml:space="preserve">
    <value>Is null</value>
  </data>
  <data name="Filter_StringIsEmpty" xml:space="preserve">
    <value>Is empty</value>
  </data>
  <data name="Filter_StringIsNotEmpty" xml:space="preserve">
    <value>Is not empty</value>
  </data>
  <data name="Filter_StringIsNotNull" xml:space="preserve">
    <value>Is not null</value>
  </data>
  <data name="Filter_StringIsNull" xml:space="preserve">
    <value>Is null</value>
  </data>
  <data name="Filter_Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Filter_SelectedItemsFormat" xml:space="preserve">
    <value>{0} selected items</value>
  </data>
  <data name="Filter_Title" xml:space="preserve">
    <value>Show items with value that:</value>
  </data>
  <data name="Filter_StringIsNotNullOrEmpty" xml:space="preserve">
    <value>Has value</value>
  </data>
  <data name="Filter_StringIsNullOrEmpty" xml:space="preserve">
    <value>Has no value</value>
  </data>
  <data name="Grid_Search" xml:space="preserve">
    <value>Search...</value>
  </data>
  <data name="Filter_All" xml:space="preserve">
    <value>(All)</value>
  </data>
  <data name="NumericTextBox_DecreaseValue" xml:space="preserve">
    <value>Decrease value</value>
  </data>
  <data name="NumericTextBox_IncreaseValue" xml:space="preserve">
    <value>Increase value</value>
  </data>
  <data name="Calendar_Today" xml:space="preserve">
    <value>Today</value>
  </data>
  <data name="TimePicker_Now" xml:space="preserve">
    <value>Now</value>
  </data>
  <data name="TimePicker_ToggleClock" xml:space="preserve">
    <value>Toggle clock</value>
  </data>
  <data name="ComboBox_Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="ComboBox_NoData" xml:space="preserve">
    <value>No data</value>
  </data>
  <data name="DropDownList_NoData" xml:space="preserve">
    <value>No data</value>
  </data>
  <data name="TimePicker_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="TimePicker_Set" xml:space="preserve">
    <value>Set</value>
  </data>
  <data name="TimePicker_Day" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="TimePicker_DayPeriod" xml:space="preserve">
    <value>AM/PM</value>
  </data>
  <data name="TimePicker_Era" xml:space="preserve">
    <value>Era</value>
  </data>
  <data name="TimePicker_Hour" xml:space="preserve">
    <value>Hour</value>
  </data>
  <data name="TimePicker_Minute" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="TimePicker_Month" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="TimePicker_Quarter" xml:space="preserve">
    <value>Quarter</value>
  </data>
  <data name="TimePicker_Second" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="TimePicker_WeekDay" xml:space="preserve">
    <value>Weekday</value>
  </data>
  <data name="TimePicker_Year" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="TimePicker_Zone" xml:space="preserve">
    <value>Zone</value>
  </data>
  <data name="DateTimePicker_Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DateTimePicker_Time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="DateTimePicker_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="DateTimePicker_Set" xml:space="preserve">
    <value>Set</value>
  </data>
  <data name="Scheduler_Next" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="Scheduler_Previous" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="Scheduler_ShowFullDay" xml:space="preserve">
    <value>Show full day</value>
  </data>
  <data name="Scheduler_ShowWorkDay" xml:space="preserve">
    <value>Show business hours</value>
  </data>
  <data name="Scheduler_Today" xml:space="preserve">
    <value>Today</value>
  </data>
  <data name="Scheduler_Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Scheduler_Day" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="Scheduler_MultiDay" xml:space="preserve">
    <value>MultiDay</value>
  </data>
  <data name="Scheduler_Week" xml:space="preserve">
    <value>Week</value>
  </data>
  <data name="Scheduler_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Scheduler_Editor_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Scheduler_Editor_EditorTitle" xml:space="preserve">
    <value>Event</value>
  </data>
  <data name="Scheduler_Editor_End" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="Scheduler_Editor_IsAllDay" xml:space="preserve">
    <value>All Day Event</value>
  </data>
  <data name="Scheduler_Editor_Start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="Scheduler_Editor_Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Scheduler_Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Scheduler_AllDay" xml:space="preserve">
    <value>all day</value>
  </data>
  <data name="Scheduler_Editor_EndTimeRequiredValidationMessage" xml:space="preserve">
    <value>End time is required.</value>
  </data>
  <data name="Scheduler_Editor_EndTimeValueValidationMessage" xml:space="preserve">
    <value>End time must be after the Start time.</value>
  </data>
  <data name="Scheduler_Editor_StartTimeRequiredValidationMessage" xml:space="preserve">
    <value>Start time is required.</value>
  </data>
  <data name="Scheduler_Editor_StartTimeValueValidationMessage" xml:space="preserve">
    <value>Start time must be before End time.</value>
  </data>
  <data name="Scheduler_Editor_TitleRequiredValidationMessage" xml:space="preserve">
    <value>Title is required.</value>
  </data>
  <data name="Calendar_GoToNext" xml:space="preserve">
    <value>Go to the next period</value>
  </data>
  <data name="Calendar_GoToPrevious" xml:space="preserve">
    <value>Go to the previous period</value>
  </data>
  <data name="Calendar_Choose_Decade" xml:space="preserve">
    <value>Choose a decade</value>
  </data>
  <data name="Calendar_Choose_Month" xml:space="preserve">
    <value>Choose a month</value>
  </data>
  <data name="Calendar_Choose_Year" xml:space="preserve">
    <value>Choose an year</value>
  </data>
  <data name="AutoComplete_Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="AutoComplete_NoData" xml:space="preserve">
    <value>No data</value>
  </data>
  <data name="MultiSelect_Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="MultiSelect_NoData" xml:space="preserve">
    <value>No data</value>
  </data>
</root>